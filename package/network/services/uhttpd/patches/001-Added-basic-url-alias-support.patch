Index: uhttpd/file.c
===================================================================
--- uhttpd.orig/file.c
+++ uhttpd/file.c
@@ -675,9 +675,11 @@ dispatch_find(const char *url, struct pa
 }
 
 static void
-uh_invoke_script(struct client *cl, struct dispatch_handler *d, struct path_info *pi)
+uh_invoke_script(struct client *cl, struct dispatch_handler *d, char *url, struct path_info *pi)
 {
-	char *url = blobmsg_data(blob_data(cl->hdr.head));
+	if (url == NULL) {
+		url = blobmsg_data(blob_data(cl->hdr.head));
+	}
 
 	n_requests++;
 	d->handle_request(cl, url, pi);
@@ -699,7 +701,7 @@ static void uh_complete_request(struct c
 		cl = dr->cl;
 		dr->called = true;
 		cl->dispatch.data_blocked = false;
-		uh_invoke_script(cl, dr->d, dr->path ? &dr->pi : NULL);
+		uh_invoke_script(cl, dr->d, NULL, dr->path ? &dr->pi : NULL);
 		client_poll_post_data(cl);
 	}
 }
@@ -775,7 +777,7 @@ uh_invoke_handler(struct client *cl, str
 		return uh_defer_script(cl, d, pi);
 
 	cl->dispatch.req_free = uh_complete_request;
-	uh_invoke_script(cl, d, pi);
+	uh_invoke_script(cl, d, url, pi);
 }
 
 static bool __handle_file_request(struct client *cl, char *url)
@@ -819,9 +821,13 @@ void uh_handle_request(struct client *cl
 {
 	struct http_request *req = &cl->request;
 	struct dispatch_handler *d;
-	char *url = blobmsg_data(blob_data(cl->hdr.head));
+	char url[1024];
+	char *orig_url = blobmsg_data(blob_data(cl->hdr.head));
 	char *error_handler;
 
+	/*Aliasing*/
+	uh_alias_transform(orig_url, url, 1024);
+
 	req->redirect_status = 200;
 	d = dispatch_find(url, NULL);
 	if (d)
Index: uhttpd/main.c
===================================================================
--- uhttpd.orig/main.c
+++ uhttpd/main.c
@@ -72,6 +72,14 @@ static void uh_config_parse(void)
 				continue;
 
 			uh_auth_add(line, col1, col2);
+		} else if (!strncmp(line, "A:", 2)) {
+			if(!(col1 = strchr(line, ':')) || (*col1++ = 0) ||
+				!(col2 = strchr(col1, ':')) || (*col2++ = 0) ||
+				!(eol = strchr(col2, '\n')) || (*eol++  = 0))
+				continue;
+
+			uh_alias_add(strdup(col1),strdup(col2));
+
 		} else if (!strncmp(line, "I:", 2)) {
 			if (!(col1 = strchr(line, ':')) || (*col1++ = 0) ||
 				!(eol = strchr(col1, '\n')) || (*eol++  = 0))
Index: uhttpd/uhttpd.h
===================================================================
--- uhttpd.orig/uhttpd.h
+++ uhttpd/uhttpd.h
@@ -289,6 +289,9 @@ void client_poll_post_data(struct client
 void uh_client_read_cb(struct client *cl);
 void uh_client_notify_state(struct client *cl);
 
+void uh_alias_add(const char *from, const char *to);
+bool uh_alias_transform(const char *url, char *dest, int test_l);
+
 void uh_auth_add(const char *path, const char *user, const char *pass);
 bool uh_auth_check(struct client *cl, struct path_info *pi);
 
Index: uhttpd/CMakeLists.txt
===================================================================
--- uhttpd.orig/CMakeLists.txt
+++ uhttpd/CMakeLists.txt
@@ -21,7 +21,7 @@ IF(LIBS STREQUAL "LIBS-NOTFOUND")
 	SET(LIBS "")
 ENDIF()
 
-SET(SOURCES main.c listen.c client.c utils.c file.c auth.c cgi.c relay.c proc.c plugin.c)
+SET(SOURCES main.c listen.c client.c utils.c file.c alias.c auth.c cgi.c relay.c proc.c plugin.c)
 IF(TLS_SUPPORT)
 	SET(SOURCES ${SOURCES} tls.c)
 	ADD_DEFINITIONS(-DHAVE_TLS)
Index: uhttpd/alias.c
===================================================================
--- /dev/null
+++ uhttpd/alias.c
@@ -0,0 +1,40 @@
+
+#include <libubox/blobmsg.h>
+#include "uhttpd.h"
+
+static LIST_HEAD(aliases);
+
+struct url_alias {
+	struct list_head list;
+	const char *from;
+	int from_l;
+	const char *to;
+	int to_l;
+};
+
+void uh_alias_add(const char *from, const char *to) {
+	struct url_alias *alias = malloc(sizeof(struct url_alias));
+	alias->from = strdup(from);
+	alias->from_l = strlen(from);
+	alias->to = strdup(to);
+	alias->to_l = strlen(to);
+
+	list_add_tail(&alias->list, &aliases);
+}
+
+bool uh_alias_transform(const char *url, char *dest, int dest_l) {
+	struct url_alias *alias;
+
+	list_for_each_entry(alias, &aliases, list) {
+		if(strncmp(url, alias->from, alias->from_l) == 0) {
+		   snprintf(dest, dest_l, alias->to, url + alias->from_l);
+		   dest[dest_l-1] = 0;
+		   return true;
+		}
+	}
+
+	//The URL doesn't match any alias, copy as is
+	strncpy(dest, url, dest_l);
+	dest[dest_l-1] = 0;
+	return false;
+}
